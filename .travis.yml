dist: xenial
language: cpp
os: linux

jobs:
  include:
    - compiler: gcc-8
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
      env: MYCC=gcc-8 MYCXX=g++-8
    - compiler: gcc-9
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-9
      env: MYCC=gcc-9 MYCXX=g++-9
    - compiler: gcc-10
      dist: bionic
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-10
      env: MYCC=gcc-10 MYCXX=g++-10
    - compiler: gcc-11
      dist: focal
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-11
      env: MYCC=gcc-11 MYCXX=g++-11
    - compiler: gcc-11
      dist: focal
      arch: arm64
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-11
      env: MYCC=gcc-11 MYCXX=g++-11
    - compiler: clang-10
      dist: bionic
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main
              key_url: https://apt.llvm.org/llvm-snapshot.gpg.key
          packages:
            - clang-10
      env: MYCC=clang-10 MYCXX=clang++-10
    - compiler: clang-11
      dist: bionic
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-11 main
              key_url: https://apt.llvm.org/llvm-snapshot.gpg.key
          packages:
            - clang-11
      env: MYCC=clang-11 MYCXX=clang++-11
    - compiler: clang-12
      dist: bionic
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main
              key_url: https://apt.llvm.org/llvm-snapshot.gpg.key
          packages:
            - clang-12
      env: MYCC=clang-12 MYCXX=clang++-12
    - compiler: gcc-11
      dist: focal
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-11
      env: MYCC=gcc-11 MYCXX=g++-11 ENABLE_ASAN=on
    - compiler: clang-12
      dist: bionic
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main
              key_url: https://apt.llvm.org/llvm-snapshot.gpg.key
          packages:
            - clang-12
      env: MYCC=clang MYCXX=clang++ ENABLE_UBSAN=on
    - compiler: x86_64-w64-mingw32-g++
      dist: focal
      addons:
        apt:
          packages:
            - g++-mingw-w64-x86-64
      env: MYCC=/usr/bin/x86_64-w64-mingw32-gcc MYCXX=/usr/bin/x86_64-w64-mingw32-g++
    - os: linux
      dist: bionic
      env:
        - TEST="Clang Format"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main
              key_url: https://apt.llvm.org/llvm-snapshot.gpg.key
          packages:
            - clang-format-12
            - clang-12
      script:
        - mkdir build
        - cd build
        - ADD_OPTS="-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++"
        - ADD_OPTS="$ADD_OPTS -DCLANG_FORMAT=/usr/bin/clang-format-12"
        - cmake $ADD_OPTS ..
        - make format
        - |
          if [[ -n $(git diff) ]]; then
            echo "You must run make format before submitting a pull request"
            echo ""
            git diff
            exit -1
          fi
    - os: linux
      dist: bionic
      env:
        - TEST="Clang Tidy"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - sourceline: deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main
              key_url: https://apt.llvm.org/llvm-snapshot.gpg.key
          packages:
            - clang-tidy-12
            - clang-12
      script:
        - mkdir build
        - cd build
        - ADD_OPTS="-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++"
        - ADD_OPTS="$ADD_OPTS -DCLANG_TIDY=/usr/bin/clang-tidy-12"
        - cmake $ADD_OPTS ..
        - make tidy >output.txt
        - |
          if [[ -n $(grep "warning: " output.txt) ]] || [[ -n $(grep "error: " output.txt) ]]; then
              echo "You must pass the clang tidy checks before submitting a pull request"
              echo ""
              grep --color -E '^|warning: |error: ' output.txt
              exit -1;
          else
              echo -e "\033[1;32m\xE2\x9C\x93 passed:\033[0m $1";
          fi


script:
  - mkdir build
  - cd build
  - BUILD_TYPE=Release
  - |
    if [[ "$MYCC" == *mingw* ]] ; then
      ADD_OPTS="-DCMAKE_TOOLCHAIN_FILE=$TRAVIS_BUILD_DIR/Toolchain-cross-mingw-linux.cmake"
    else
      ADD_OPTS="-DCMAKE_C_COMPILER=$MYCC -DCMAKE_CXX_COMPILER=$MYCXX"
    fi
  - |
    if [[ -n "$ENABLE_ASAN" ]] ; then
      ADD_OPTS="$ADD_OPTS -DENABLE_ASAN=$ENABLE_ASAN"
      BUILD_TYPE=Debug
    fi
  - |
    if [[ -n "$ENABLE_UBSAN" ]] ; then
      ADD_OPTS="$ADD_OPTS -DENABLE_UBSAN=$ENABLE_UBSAN"
      BUILD_TYPE=Debug
    fi
  - |
    if [[ -n "$CODE_COVERAGE" ]] ; then
      ADD_OPTS="$ADD_OPTS -DENABLE_COVERAGE=$CODE_COVERAGE"
      BUILD_TYPE=Debug
    fi
  - ADD_OPTS="$ADD_OPTS -DCMAKE_BUILD_TYPE=$BUILD_TYPE"
  - cmake $ADD_OPTS ..
  - make
  - if [[ "$MYCC" != *mingw* ]] ; then make runtest; fi
  - |
    if [[ -n "$CODE_COVERAGE" ]] ; then
      lcov -d . -c -o coverage.info                      # parse coverage data
      lcov -r coverage.info "/usr*" -o coverage.info     # remove data for system headers
      lcov -l coverage.info                              # just list a short summary of the results
      bash <(curl -s https://codecov.io/bash)
    fi
